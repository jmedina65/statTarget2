lyout[1, 1] <- gWidgets2::gbutton("Meta File...", cont = lyout, handler = function(h, ...) {
std <- gWidgets2::gfile(text = "Select Meta-information File...", filter = list(metafiles = list(patterns = c("*.csv")),
`All files` = list(patterns = c("*"))))
if (std != "") {
if (length(grep("\\", std, fixed = TRUE)) > 0) {
mystr <- strsplit(std, split = "\\", fixed = TRUE)[[1]]
mystr.lth <- mystr[length(mystr)]
mydir <- substr(std, 1, stop = (nchar(std) - nchar(mystr.lth) - 1))
setwd(mydir)
} else if (length(grep("/", std, fixed = TRUE)) > 0) {
mystr <- strsplit(std, split = "/", fixed = TRUE)[[1]]
mystr.lth <- mystr[length(mystr)]
mydir <- substr(std, 1, stop = (nchar(std) - nchar(mystr.lth) - 1))
setwd(mydir)
}
samP <- std
gWidgets2::svalue(widgets$pheno) <- samP
}
})
lyout[1, 2] <- (widgets$pheno <- gWidgets2::gedit(text = "", initial.msg= "Click the left button for data path",cont = lyout))
gWidgets2::tooltip(widgets$pheno) <- "Meta-information for Signal Correction, i.e. sample name, class, batch and order"
lyout[2, 1] <- gWidgets2::gbutton("Profile File...", cont = lyout, handler = function(h, ...) {
std <- gWidgets2::gfile("Select Profile File...", filter = list(`Profile files` = list(patterns = c("*.csv")),
`All files` = list(patterns = c("*"))))
if (std != "") {
if (length(grep("\\", std, fixed = TRUE)) > 0) {
mystr <- strsplit(std, split = "\\", fixed = TRUE)[[1]]
mystr.lth <- mystr[length(mystr)]
mydir <- substr(std, 1, stop = (nchar(std) - nchar(mystr.lth) - 1))
setwd(mydir)
} else if (length(grep("/", std, fixed = TRUE)) > 0) {
mystr <- strsplit(std, split = "/", fixed = TRUE)[[1]]
mystr.lth <- mystr[length(mystr)]
mydir <- substr(std, 1, stop = (nchar(std) - nchar(mystr.lth) - 1))
setwd(mydir)
}
samF <- std
gWidgets2::svalue(widgets$profile) <- samF
}
})
lyout[2, 2] <- (widgets$profile <- gWidgets2::gedit(text = "", initial.msg= "Click the left button for data path",cont = lyout))
gWidgets2::tooltip(widgets$profile) <- "Expression data for Signal Correction"
lyout[3, 1] <- gWidgets2::gbutton("Stat File...", cont = lyout, handler = function(h, ...) {
std <- gWidgets2::gfile("Select Stat File...", filter = list(`Stat files` = list(patterns = c("*.csv")),
`All files` = list(patterns = c("*"))))
if (std != "") {
if (length(grep("\\", std, fixed = TRUE)) > 0) {
mystr <- strsplit(std, split = "\\", fixed = TRUE)[[1]]
mystr.lth <- mystr[length(mystr)]
mydir <- substr(std, 1, stop = (nchar(std) - nchar(mystr.lth) - 1))
setwd(mydir)
} else if (length(grep("/", std, fixed = TRUE)) > 0) {
mystr <- strsplit(std, split = "/", fixed = TRUE)[[1]]
mystr.lth <- mystr[length(mystr)]
mydir <- substr(std, 1, stop = (nchar(std) - nchar(mystr.lth) - 1))
setwd(mydir)
}
stat <- std
gWidgets2::svalue(widgets$stat) <- stat
}
})
lyout[3, 2] <- (widgets$stat <- gWidgets2::gedit(text = "", initial.msg= "Click the left button for data path",cont = lyout))
gWidgets2::tooltip(widgets$stat) <- "Expression data for Statistical Analysis"
## prepare for data file ready
nb = gWidgets2::gnotebook(cont = gp,fill = TRUE, expand = TRUE)
shiftco_win = gWidgets2::ggroup(horizontal = FALSE, cont = nb, label = "Signal Correction")
stat_win = gWidgets2::ggroup(horizontal = FALSE, cont = nb, label = "Statistical Analysis")
sb <- gWidgets2::gstatusbar("Contact Us: hemi.luan@gmail.com, Hong Kong Baptist University",
container = win)
gWidgets2::font(sb) <- list(size = 9, color = "blue")
# shiftco_win
lyout <- gWidgets2::glayout(container = shiftco_win)
# Data preprocessing
gWidgets2::glayout(container = shiftco_win)
slyout <- ggroup(cont=shiftco_win, horizontal=FALSE,spacing = 15)
dslyout <- gexpandgroup("Data preprocessing", cont=slyout)
dslyout2 <- gformlayout(cont=dslyout)
widgets$Frule1 <- gWidgets2::gedit("0.8", initial="0.8", label="NA.Filter",cont = dslyout2)
gWidgets2::tooltip(widgets$Frule1) <- "Removing missing values using 80 percent rule; valueRange,'0 ~ 1' "
widgets$imputeM1 <- gWidgets2::gcombobox(c("KNN", "min", "minHalf", "median"),  label="Imputation",cont = dslyout2)
gWidgets2::tooltip(widgets$imputeM1) <- "Missing value or zero value imputation"
visible(dslyout) <- F
# Singal correction method
cslyout <- gexpandgroup("Singal correction method", cont=slyout)
cslyout2 <- gformlayout(cont=cslyout)
#widgets$MLmethod <- gWidgets2::gcombobox(c("QCRFSC", "QCRLSC"), label="method",cont = cslyout2)
widgets$MLmethod <- gWidgets2::gradio(c("QCRFSC", "QCRLSC"),selected = 2, cont=cslyout2, horizontal=FALSE)
#gWidgets2::tooltip(widgets$MLmethod) <- "Ensemble learning method for QC based singal correction"
visible(cslyout) <- TRUE
# Parameters for singal correction method
qfslyout <- gexpandgroup("Parameters", cont=slyout)
qfslyout2 <- glayout(cont=qfslyout,homogeneous=TRUE)
qfslyout2[1,1,expand=TRUE, anchor=c(1,0)] <- "      QCspan (QCRLSC only)"
qfslyout2[1,2] <- (widgets$QCspan <- gWidgets2::gslider(from = 0.35, to = 1.0, by = 0.01, value = 0.5,cont=qfslyout2))
qfslyout2[2,1,expand=TRUE, anchor=c(1,0)] <- "Ntree (QCRFSC only)"
qfslyout2[2,2] <- (widgets$QCspan <- gWidgets2::gslider(from = 100, to = 1000, by = 10, value = 500,cont=qfslyout2))
visible(qfslyout) <- FALSE
button.group <- gWidgets2::ggroup(container = shiftco_win)
## Push buttons to right
gWidgets2::addSpring(button.group)
gsc <- gWidgets2::gbutton("Run", handler = function(h, ...) {
# close.cur.dev()
samPeno = gWidgets2::svalue(widgets$pheno)
samFile = gWidgets2::svalue(widgets$profile)
Frule1 = gWidgets2::svalue(widgets$Frule1)
Frule1 = as.numeric(Frule1)
QCspan = gWidgets2::svalue(widgets$QCspan)
QCspan = as.numeric(QCspan)
# degree = gWidgets2::svalue(widgets$degree) degree = as.numeric(degree)
MLmethod = gWidgets2::svalue(widgets$MLmethod)
imputeM1 = gWidgets2::svalue(widgets$imputeM1)
utils::capture.output(shiftCor(samPeno, samFile, Frule = Frule1, MLmethod = MLmethod,
ntree = 500, QCspan = QCspan, degree = 2, imputeM = imputeM1), file = "shiftCor.log",
split = TRUE, append = FALSE)
gWidgets2::galert("Signal Correction Finished!", title = "statTarget Alert")
}, container = button.group)
# Data preprocessing
gWidgets2::glayout(container = stat_win)
lyoutStat <- ggroup(cont=stat_win, horizontal=FALSE,spacing = 15)
glyoutStat <- gexpandgroup("Data preprocessing", cont=lyoutStat)
glyoutStat2 <- gformlayout(cont=glyoutStat)
widgets$Frule2 <- gWidgets2::gedit("", initial="0.8", label="   NA.Filter",cont = glyoutStat2)
gWidgets2::tooltip(widgets$Frule2) <- "Removing missing values using 80 percent rule; valueRange,'0 ~ 1' "
widgets$imputeM2 <- gWidgets2::gcombobox(c("KNN", "min", "minHalf", "median"), label="   Imputation",cont = glyoutStat2)
gWidgets2::tooltip(widgets$imputeM2) <- "Missing value imputation"
widgets$normM <- gWidgets2::gcombobox(c("NONE", "SUM", "PQN"), label="   Normalization",cont = glyoutStat2)
gWidgets2::tooltip(widgets$normM) <- "median quotient normalization, 'PQN'; integral normalization , 'SUM', and 'NONE' "
widgets$Glog <- gWidgets2::gcombobox(c("TRUE", "FALSE"), label="   Glog",cont = glyoutStat2)
gWidgets2::tooltip(widgets$Glog) <- "Data variance stabilising transformations"
visible(glyoutStat) <- F
# PCA and PLS analysis
plyoutStat <- gexpandgroup("PCA and PLS analysis", cont=lyoutStat)
plyoutStat2 <- gWidgets2::gformlayout(container = plyoutStat)
widgets$scalingMethod <- gWidgets2::gcombobox(c("Center", "Pareto", "Auto", "Vast", "Range", "None"), label="Scaling",cont = plyoutStat2)
gWidgets2::tooltip(widgets$scalingMethod) <- "Data scaling for PCA or PLS(-DA) analysis"
widgets$pcaX <- gWidgets2::gedit("1", width = 8, label="PCs in Xaxis",cont = plyoutStat2)
gWidgets2::tooltip(widgets$pcaX) <- "The X-axis (horizontal) component"
widgets$pcaY <- gWidgets2::gedit("2", width = 8, label="PCs in Xaxis",cont = plyoutStat2)
gWidgets2::tooltip(widgets$pcaY) <- "The Y-axis (Vertical) component"
visible(plyoutStat) <- F
# random forest analysis
rlyoutStat <- gexpandgroup("Random forest analysis", cont=lyoutStat)
rlyoutStat2 <- gWidgets2::gformlayout(container = rlyoutStat)
widgets$nvarRF <- gWidgets2::gedit("5", width = 8, label="   nvarRF",cont = rlyoutStat2)
gWidgets2::tooltip(widgets$nvarRF) <- "Visualizing variables importance in randomforest model"
widgets$ntree2 <- gWidgets2::gedit("500", width = 8, label="   ntree",cont = rlyoutStat2)
gWidgets2::tooltip(widgets$ntree2) <- "The number of tree"
visible(rlyoutStat) <- F
# Permutation times
tlyoutStat <- gexpandgroup("Permutation times", cont=lyoutStat)
tlyoutStat2 <- gWidgets2::gformlayout(container = tlyoutStat)
widgets$Permutation <- gWidgets2::gedit("20", width = 8, label="   Permutation times",cont = tlyoutStat2)
gWidgets2::tooltip(widgets$Permutation) <- "The number of permutation for binary PLS(-DA) and randomForest model"
visible(tlyoutStat) <- F
# Univariate analysis
ulyoutStat <- gexpandgroup("Univariate analysis", cont=lyoutStat)
ulyoutStat2 <- gWidgets2::glayout(container = ulyoutStat, expand = TRUE, fill = TRUE)
ulyoutStat2[1,1] <-"   Volcano FC >"
ulyoutStat2[1,2] <- (widgets$mfc <- gWidgets2::gedit("2", width = 5, label="Volcano FC >",cont = ulyoutStat2))
gWidgets2::tooltip(widgets$mfc) <- "Fold changes threshold for Volcano plot"
ulyoutStat2[2,1] <-"   Volcano FC <"
ulyoutStat2[2,2] <- (widgets$lfc <- gWidgets2::gedit("0.5", width = 5, label="Volcano FC <",cont = ulyoutStat2))
gWidgets2::tooltip(widgets$lfc) <- "Fold changes threshold for Volcano plot"
ulyoutStat2[3,1] <-"   Volcano Pvalue <"
ulyoutStat2[3,2] <- (widgets$pvalue <- gWidgets2::gedit("0.05", width = 5, label="Volcano Pvalue <",cont = ulyoutStat2))
gWidgets2::tooltip(widgets$pvalue) <- "Significance level 'p-value' for Volcano plot"
ulyoutStat2[1,3] <-"Multiple Testing"
ulyoutStat2[1,4, expand = TRUE] <- (widgets$FDR <- gWidgets2::gcombobox(c("TRUE", "FALSE"), cont = ulyoutStat2))
gWidgets2::tooltip(widgets$FDR) <- "Controlling the false discovery rate with Benjamini Hochberg method"
ulyoutStat2[2,3] <-"Labels"
ulyoutStat2[2,4,expand = TRUE] <- (widgets$Labels <- gWidgets2::gcombobox(c("TRUE", "FALSE"),cont = ulyoutStat2))
gWidgets2::tooltip(widgets$Labels) <- "Labelling sampleNames for scatterPlots of multiple statistical analysis"
visible(ulyoutStat) <- F
glabel("Click above to show", cont=lyoutStat)
button.group <- gWidgets2::ggroup(container = stat_win)
## Push buttons to right
gWidgets2::addSpring(button.group)
gWidgets2::gbutton("Run", handler = function(h, ...) {
# close.cur.dev()
file = gWidgets2::svalue(widgets$stat)
Frule2 = gWidgets2::svalue(widgets$Frule2)
Frule2 = as.numeric(Frule2)
imputeM2 = gWidgets2::svalue(widgets$imputeM2)
glog = gWidgets2::svalue(widgets$Glog)
normM = gWidgets2::svalue(widgets$norm)
nvarRF = gWidgets2::svalue(widgets$nvarRF)
nvarRF = as.numeric(nvarRF)
ntree2 = gWidgets2::svalue(widgets$ntree2)
ntree2 = as.numeric(ntree2)
scaling = gWidgets2::svalue(widgets$scalingMethod)
silt = gWidgets2::svalue(widgets$Permutation)
silt = as.numeric(silt)
pcax = gWidgets2::svalue(widgets$pcaX)
pcax = as.numeric(pcax)
pcay = gWidgets2::svalue(widgets$pcaY)
pcay = as.numeric(pcay)
Labels = gWidgets2::svalue(widgets$Labels)
FDR = gWidgets2::svalue(widgets$FDR)
# Labels = as.numeric(pcay)
upper.lim = gWidgets2::svalue(widgets$mfc)
upper.lim = as.numeric(upper.lim)
lower.lim = gWidgets2::svalue(widgets$lfc)
lower.lim = as.numeric(lower.lim)
sig.lim = gWidgets2::svalue(widgets$pvalue)
sig.lim = as.numeric(sig.lim)
utils::capture.output(statAnalysis(file = file, Frule = Frule2, normM = normM, imputeM = imputeM2,
glog = glog, FDR = FDR, ntree = ntree2, nvarRF = nvarRF, scaling = scaling, silt = silt, pcax = pcax,
pcay = pcay, Labels = Labels, upper.lim = upper.lim, lower.lim = lower.lim, sig.lim = sig.lim),
file = "statAnalysis.log", split = TRUE, append = FALSE)
gWidgets2::galert("StatTarget Analysis Finished!", title = "statTarget Alert")
# for(i in 1:100) {Sys.sleep(.1); svalue(pbar) <- i}
}, container = button.group)
#Quit <- gWidgets2::gbutton("Quit", container = gp, handler = function(h, ...) {gWidgets2::dispose(win)})
}
statTargetGUI()
#' @name statTargetGUI
#' @title statTargetGUI for statTarget software
#' @description The statTarget GUI session. The Signal Correction and
#' Statistical Analysis session are included in statTarget 2.0 software.
#' See the details at https://stattarget.github.io
#' @author Hemi Luan hemi.luan@gmail.com
#' @references
#' Dunn WB., et al. Nat Protoc. 2011, 6, pp1060.
#' Luan H., et al. GigaScience 2015, 4, pp16.
#' Luan H., et al. J. Proteome Res., 2015, 14, pp467.
#' @keywords GUI
#' @keywords A GUI of statTarget
#' @keywords statTarget
#' @keywords Metabolomics
#' @keywords Ensemble learning for signal correction
#' @keywords Statistical analysis
#' @return The output of GUI
#' @examples
#' if (interactive()) {statTargetGUI()}
#' @export
statTargetGUI <- function() {
# require RGtk2 package
if (require("RGtk2")) {
print("RGtk2 is loaded correctly")
} else {
print("trying to install RGtk2")
utils::install.packages("RGtk2")
if (require("RGtk2")) {
print("RGtk2 installed and loaded")
} else {
stop("could not install RGtk2")
}
}
if (require("gWidgets2RGtk2")) {
print("gWidgets2RGtk2 is loaded correctly")
} else {
print("trying to install gWidgets2RGtk2")
utils::install.packages("gWidgets2RGtk2")
if (require("gWidgets2RGtk2")) {
print("gWidgets2RGtk2 installed and loaded")
} else {
stop("could not install gWidgets2RGtk2")
}
}
if (require("gWidgets2")) {
print("gWidgets2 is loaded correctly")
} else {
print("trying to install gWidgets2")
utils::install.packages("gWidgets2")
if (require("gWidgets2")) {
print("gWidgets2 installed and loaded")
} else {
stop("could not install gWidgets2")
}
}
# GUI
color <- grDevices::colors()
linetype <- c("solid", "dashed", "dotted", "dotdash", "longdash", "twodash", "F8", "431313",
"22848222")
linetype <- rep(linetype, 4)
widgets <- list()
win = gWidgets2::gwindow("Welcome to statTarget",expand = FALSE, fill = FALSE,height=600)  #, width=700, height=400)
gp = gWidgets2::ggroup(horizontal = FALSE, container = win, expand = FALSE,fill = F)
gi = gWidgets2::gimage("shinv.png", system.file("extdata", package = "statTarget"), cont = gp)
tmp <- gWidgets2::gframe("Data-input", container = gp, expand = FALSE,fill=TRUE)
lyout <- gWidgets2::glayout(container = tmp)
lyout[1, 1] <- gWidgets2::gbutton("Meta File...", cont = lyout, handler = function(h, ...) {
std <- gWidgets2::gfile(text = "Select Meta-information File...", filter = list(metafiles = list(patterns = c("*.csv")),
`All files` = list(patterns = c("*"))))
if (std != "") {
if (length(grep("\\", std, fixed = TRUE)) > 0) {
mystr <- strsplit(std, split = "\\", fixed = TRUE)[[1]]
mystr.lth <- mystr[length(mystr)]
mydir <- substr(std, 1, stop = (nchar(std) - nchar(mystr.lth) - 1))
setwd(mydir)
} else if (length(grep("/", std, fixed = TRUE)) > 0) {
mystr <- strsplit(std, split = "/", fixed = TRUE)[[1]]
mystr.lth <- mystr[length(mystr)]
mydir <- substr(std, 1, stop = (nchar(std) - nchar(mystr.lth) - 1))
setwd(mydir)
}
samP <- std
gWidgets2::svalue(widgets$pheno) <- samP
}
})
lyout[1, 2] <- (widgets$pheno <- gWidgets2::gedit(text = "", initial.msg= "Click the left button for data path",cont = lyout))
gWidgets2::tooltip(widgets$pheno) <- "Meta-information for Signal Correction, i.e. sample name, class, batch and order"
lyout[2, 1] <- gWidgets2::gbutton("Profile File...", cont = lyout, handler = function(h, ...) {
std <- gWidgets2::gfile("Select Profile File...", filter = list(`Profile files` = list(patterns = c("*.csv")),
`All files` = list(patterns = c("*"))))
if (std != "") {
if (length(grep("\\", std, fixed = TRUE)) > 0) {
mystr <- strsplit(std, split = "\\", fixed = TRUE)[[1]]
mystr.lth <- mystr[length(mystr)]
mydir <- substr(std, 1, stop = (nchar(std) - nchar(mystr.lth) - 1))
setwd(mydir)
} else if (length(grep("/", std, fixed = TRUE)) > 0) {
mystr <- strsplit(std, split = "/", fixed = TRUE)[[1]]
mystr.lth <- mystr[length(mystr)]
mydir <- substr(std, 1, stop = (nchar(std) - nchar(mystr.lth) - 1))
setwd(mydir)
}
samF <- std
gWidgets2::svalue(widgets$profile) <- samF
}
})
lyout[2, 2] <- (widgets$profile <- gWidgets2::gedit(text = "", initial.msg= "Click the left button for data path",cont = lyout))
gWidgets2::tooltip(widgets$profile) <- "Expression data for Signal Correction"
lyout[3, 1] <- gWidgets2::gbutton("Stat File...", cont = lyout, handler = function(h, ...) {
std <- gWidgets2::gfile("Select Stat File...", filter = list(`Stat files` = list(patterns = c("*.csv")),
`All files` = list(patterns = c("*"))))
if (std != "") {
if (length(grep("\\", std, fixed = TRUE)) > 0) {
mystr <- strsplit(std, split = "\\", fixed = TRUE)[[1]]
mystr.lth <- mystr[length(mystr)]
mydir <- substr(std, 1, stop = (nchar(std) - nchar(mystr.lth) - 1))
setwd(mydir)
} else if (length(grep("/", std, fixed = TRUE)) > 0) {
mystr <- strsplit(std, split = "/", fixed = TRUE)[[1]]
mystr.lth <- mystr[length(mystr)]
mydir <- substr(std, 1, stop = (nchar(std) - nchar(mystr.lth) - 1))
setwd(mydir)
}
stat <- std
gWidgets2::svalue(widgets$stat) <- stat
}
})
lyout[3, 2] <- (widgets$stat <- gWidgets2::gedit(text = "", initial.msg= "Click the left button for data path",cont = lyout))
gWidgets2::tooltip(widgets$stat) <- "Expression data for Statistical Analysis"
## prepare for data file ready
nb = gWidgets2::gnotebook(cont = gp,fill = TRUE, expand = TRUE)
shiftco_win = gWidgets2::ggroup(horizontal = FALSE, cont = nb, label = "Signal Correction")
stat_win = gWidgets2::ggroup(horizontal = FALSE, cont = nb, label = "Statistical Analysis")
sb <- gWidgets2::gstatusbar("Contact Us: hemi.luan@gmail.com, Hong Kong Baptist University",
container = win)
gWidgets2::font(sb) <- list(size = 9, color = "blue")
# shiftco_win
lyout <- gWidgets2::glayout(container = shiftco_win)
# Data preprocessing
gWidgets2::glayout(container = shiftco_win)
slyout <- ggroup(cont=shiftco_win, horizontal=FALSE,spacing = 15)
dslyout <- gexpandgroup("Data preprocessing", cont=slyout)
dslyout2 <- gformlayout(cont=dslyout)
widgets$Frule1 <- gWidgets2::gedit("0.8", initial="0.8", label="NA.Filter",cont = dslyout2)
gWidgets2::tooltip(widgets$Frule1) <- "Removing missing values using 80 percent rule; valueRange,'0 ~ 1' "
widgets$imputeM1 <- gWidgets2::gcombobox(c("KNN", "min", "minHalf", "median"),  label="Imputation",cont = dslyout2)
gWidgets2::tooltip(widgets$imputeM1) <- "Missing value or zero value imputation"
visible(dslyout) <- F
# Singal correction method
cslyout <- gexpandgroup("Singal correction method", cont=slyout)
cslyout2 <- gformlayout(cont=cslyout)
#widgets$MLmethod <- gWidgets2::gcombobox(c("QCRFSC", "QCRLSC"), label="method",cont = cslyout2)
widgets$MLmethod <- gWidgets2::gradio(c("QCRFSC", "QCRLSC"),selected = 2, cont=cslyout2, horizontal=FALSE)
#gWidgets2::tooltip(widgets$MLmethod) <- "Ensemble learning method for QC based singal correction"
visible(cslyout) <- TRUE
# Parameters for singal correction method
qfslyout <- gexpandgroup("Parameters", cont=slyout)
qfslyout2 <- glayout(cont=qfslyout,homogeneous=TRUE)
qfslyout2[1,1,expand=TRUE, anchor=c(1,0)] <- "      QCspan (QCRLSC only)"
qfslyout2[1,2] <- (widgets$QCspan <- gWidgets2::gslider(from = 0.35, to = 1.0, by = 0.01, value = 0.5,cont=qfslyout2))
qfslyout2[2,1,expand=TRUE, anchor=c(1,0)] <- "Ntree (QCRFSC only)"
qfslyout2[2,2] <- (widgets$QCspan <- gWidgets2::gslider(from = 100, to = 1000, by = 10, value = 500,cont=qfslyout2))
visible(qfslyout) <- FALSE
button.group <- gWidgets2::ggroup(container = shiftco_win)
## Push buttons to right
gWidgets2::addSpring(button.group)
gsc <- gWidgets2::gbutton("Run", handler = function(h, ...) {
# close.cur.dev()
samPeno = gWidgets2::svalue(widgets$pheno)
samFile = gWidgets2::svalue(widgets$profile)
Frule1 = gWidgets2::svalue(widgets$Frule1)
Frule1 = as.numeric(Frule1)
QCspan = gWidgets2::svalue(widgets$QCspan)
QCspan = as.numeric(QCspan)
# degree = gWidgets2::svalue(widgets$degree) degree = as.numeric(degree)
MLmethod = gWidgets2::svalue(widgets$MLmethod)
imputeM1 = gWidgets2::svalue(widgets$imputeM1)
utils::capture.output(shiftCor(samPeno, samFile, Frule = Frule1, MLmethod = MLmethod,
ntree = 500, QCspan = QCspan, degree = 2, imputeM = imputeM1), file = "shiftCor.log",
split = TRUE, append = FALSE)
gWidgets2::galert("Signal Correction Finished!", title = "statTarget Alert")
}, container = button.group)
# Data preprocessing
gWidgets2::glayout(container = stat_win)
lyoutStat <- ggroup(cont=stat_win, horizontal=FALSE,spacing = 15)
glyoutStat <- gexpandgroup("Data preprocessing", cont=lyoutStat)
glyoutStat2 <- gformlayout(cont=glyoutStat)
widgets$Frule2 <- gWidgets2::gedit("", initial="0.8", label="   NA.Filter",cont = glyoutStat2)
gWidgets2::tooltip(widgets$Frule2) <- "Removing missing values using 80 percent rule; valueRange,'0 ~ 1' "
widgets$imputeM2 <- gWidgets2::gcombobox(c("KNN", "min", "minHalf", "median"), label="   Imputation",cont = glyoutStat2)
gWidgets2::tooltip(widgets$imputeM2) <- "Missing value imputation"
widgets$normM <- gWidgets2::gcombobox(c("NONE", "SUM", "PQN"), label="   Normalization",cont = glyoutStat2)
gWidgets2::tooltip(widgets$normM) <- "median quotient normalization, 'PQN'; integral normalization , 'SUM', and 'NONE' "
widgets$Glog <- gWidgets2::gcombobox(c("TRUE", "FALSE"), label="   Glog",cont = glyoutStat2)
gWidgets2::tooltip(widgets$Glog) <- "Data variance stabilising transformations"
visible(glyoutStat) <- F
# PCA and PLS analysis
plyoutStat <- gexpandgroup("PCA and PLS analysis", cont=lyoutStat)
plyoutStat2 <- gWidgets2::gformlayout(container = plyoutStat)
widgets$scalingMethod <- gWidgets2::gcombobox(c("Center", "Pareto", "Auto", "Vast", "Range", "None"), label="Scaling",cont = plyoutStat2)
gWidgets2::tooltip(widgets$scalingMethod) <- "Data scaling for PCA or PLS(-DA) analysis"
widgets$pcaX <- gWidgets2::gedit("1", width = 8, label="PCs in Xaxis",cont = plyoutStat2)
gWidgets2::tooltip(widgets$pcaX) <- "The X-axis (horizontal) component"
widgets$pcaY <- gWidgets2::gedit("2", width = 8, label="PCs in Xaxis",cont = plyoutStat2)
gWidgets2::tooltip(widgets$pcaY) <- "The Y-axis (Vertical) component"
visible(plyoutStat) <- F
# random forest analysis
rlyoutStat <- gexpandgroup("Random forest analysis", cont=lyoutStat)
rlyoutStat2 <- gWidgets2::gformlayout(container = rlyoutStat)
widgets$nvarRF <- gWidgets2::gedit("5", width = 8, label="   nvarRF",cont = rlyoutStat2)
gWidgets2::tooltip(widgets$nvarRF) <- "Visualizing variables importance in randomforest model"
widgets$ntree2 <- gWidgets2::gedit("500", width = 8, label="   ntree",cont = rlyoutStat2)
gWidgets2::tooltip(widgets$ntree2) <- "The number of tree"
visible(rlyoutStat) <- F
# Permutation times
tlyoutStat <- gexpandgroup("Permutation times", cont=lyoutStat)
tlyoutStat2 <- gWidgets2::gformlayout(container = tlyoutStat)
widgets$Permutation <- gWidgets2::gedit("20", width = 8, label="   Permutation times",cont = tlyoutStat2)
gWidgets2::tooltip(widgets$Permutation) <- "The number of permutation for binary PLS(-DA) and randomForest model"
visible(tlyoutStat) <- F
# Univariate analysis
ulyoutStat <- gexpandgroup("Univariate analysis", cont=lyoutStat)
ulyoutStat2 <- gWidgets2::glayout(container = ulyoutStat, expand = TRUE, fill = TRUE)
ulyoutStat2[1,1] <-"   Volcano FC >"
ulyoutStat2[1,2] <- (widgets$mfc <- gWidgets2::gedit("2", width = 5, label="Volcano FC >",cont = ulyoutStat2))
gWidgets2::tooltip(widgets$mfc) <- "Fold changes threshold for Volcano plot"
ulyoutStat2[2,1] <-"   Volcano FC <"
ulyoutStat2[2,2] <- (widgets$lfc <- gWidgets2::gedit("0.5", width = 5, label="Volcano FC <",cont = ulyoutStat2))
gWidgets2::tooltip(widgets$lfc) <- "Fold changes threshold for Volcano plot"
ulyoutStat2[3,1] <-"   Volcano Pvalue <"
ulyoutStat2[3,2] <- (widgets$pvalue <- gWidgets2::gedit("0.05", width = 5, label="Volcano Pvalue <",cont = ulyoutStat2))
gWidgets2::tooltip(widgets$pvalue) <- "Significance level 'p-value' for Volcano plot"
ulyoutStat2[1,3] <-"   Multiple Testing"
ulyoutStat2[1,4, expand = TRUE] <- (widgets$FDR <- gWidgets2::gcombobox(c("TRUE", "FALSE"), cont = ulyoutStat2))
gWidgets2::tooltip(widgets$FDR) <- "Controlling the false discovery rate with Benjamini Hochberg method"
ulyoutStat2[2,3] <-"   Labels"
ulyoutStat2[2,4,expand = TRUE] <- (widgets$Labels <- gWidgets2::gcombobox(c("TRUE", "FALSE"),cont = ulyoutStat2))
gWidgets2::tooltip(widgets$Labels) <- "Labelling sampleNames for scatterPlots of multiple statistical analysis"
visible(ulyoutStat) <- F
glabel("Click above to show", cont=lyoutStat)
button.group <- gWidgets2::ggroup(container = stat_win)
## Push buttons to right
gWidgets2::addSpring(button.group)
gWidgets2::gbutton("Run", handler = function(h, ...) {
# close.cur.dev()
file = gWidgets2::svalue(widgets$stat)
Frule2 = gWidgets2::svalue(widgets$Frule2)
Frule2 = as.numeric(Frule2)
imputeM2 = gWidgets2::svalue(widgets$imputeM2)
glog = gWidgets2::svalue(widgets$Glog)
normM = gWidgets2::svalue(widgets$norm)
nvarRF = gWidgets2::svalue(widgets$nvarRF)
nvarRF = as.numeric(nvarRF)
ntree2 = gWidgets2::svalue(widgets$ntree2)
ntree2 = as.numeric(ntree2)
scaling = gWidgets2::svalue(widgets$scalingMethod)
silt = gWidgets2::svalue(widgets$Permutation)
silt = as.numeric(silt)
pcax = gWidgets2::svalue(widgets$pcaX)
pcax = as.numeric(pcax)
pcay = gWidgets2::svalue(widgets$pcaY)
pcay = as.numeric(pcay)
Labels = gWidgets2::svalue(widgets$Labels)
FDR = gWidgets2::svalue(widgets$FDR)
# Labels = as.numeric(pcay)
upper.lim = gWidgets2::svalue(widgets$mfc)
upper.lim = as.numeric(upper.lim)
lower.lim = gWidgets2::svalue(widgets$lfc)
lower.lim = as.numeric(lower.lim)
sig.lim = gWidgets2::svalue(widgets$pvalue)
sig.lim = as.numeric(sig.lim)
utils::capture.output(statAnalysis(file = file, Frule = Frule2, normM = normM, imputeM = imputeM2,
glog = glog, FDR = FDR, ntree = ntree2, nvarRF = nvarRF, scaling = scaling, silt = silt, pcax = pcax,
pcay = pcay, Labels = Labels, upper.lim = upper.lim, lower.lim = lower.lim, sig.lim = sig.lim),
file = "statAnalysis.log", split = TRUE, append = FALSE)
gWidgets2::galert("StatTarget Analysis Finished!", title = "statTarget Alert")
# for(i in 1:100) {Sys.sleep(.1); svalue(pbar) <- i}
}, container = button.group)
#Quit <- gWidgets2::gbutton("Quit", container = gp, handler = function(h, ...) {gWidgets2::dispose(win)})
}
statTargetGUI()
remove.packages("statTarget", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
source("https://bioconductor.org/biocLite.R")
biocLite(c("randomForest", "plyr", "pdist", "ROC", "rrcov", "pls", "impute"))
devtools::install_github("statTarget/statTarget2")
library(statTarget)
statTargetGUI()
?shiftCor
?statAnalysis
file.choose()
？file.choose
?file.choose
file.open()
setwd("~/Desktop/AbsoluteQuant/R/statTarget2_paper_0226/R")
library(devtools)
load_all()
build_win()
