{
if(length(grep("\\",stdt,fixed=TRUE))>0){
mystr<-strsplit(stdt,split="\\",fixed=TRUE)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(stdt,1,stop=(nchar(stdt)-nchar(mystr.lth)-1))
setwd(mydir)
}else if(length(grep("/",stdt,fixed=TRUE))>0){
mystr<-strsplit(stdt,split="/",fixed=TRUE)[[1]]
mystr.lth<-mystr[length(mystr)]
mydir<-substr(stdt,1,stop=(nchar(stdt)-nchar(mystr.lth)-1))
setwd(mydir)
}
inputdat <- stdt
gWidgets2::svalue(widgets$inputdat) <- inputdat
}
})
tlyout[1,2]<-(widgets$inputdat<-gWidgets2::gedit(text="",initial.msg = "Click the left button",cont=tlyout))
gWidgets2::tooltip(widgets$inputdat) <- "The output-file from XCMS, MZmine2,Skyline or SIEVE. "
tlyout[2,1] <- "DataSource"
tlyout[2,2] <- widgets$dsour <- gWidgets2::gradio(c("XCMS","MZmine2","SKYLINE","SIEVE"), selected = 1,cont = tlyout, horizontal = FALSE)
tlyout[2,3] <- button.group <- gWidgets2::ggroup(container = tlyout)
gWidgets2::addSpring(button.group)
gWidgets2::gbutton("Run", handler=function(h,...){
transdata <- gWidgets2::svalue(widgets$inputdat)
typeT <- gWidgets2::svalue(widgets$dsour)
transX(data=transdata, type= typeT)
galert(paste(" Task Finished ! See data at\n"
,getwd()), title = typeT, delay = 5)
},container=button.group,
)
gWidgets2::visible(xlyout) <- TRUE
# shiftco_win
lyout <- gWidgets2::glayout(container = shiftco_win)
# Data preprocessing
gWidgets2::glayout(container = shiftco_win)
slyout <- ggroup(cont = shiftco_win, horizontal = FALSE, spacing = 15)
dslyout <- gexpandgroup("Data preprocessing", cont = slyout)
dslyout2 <- gformlayout(cont = dslyout)
widgets$Frule1 <- gWidgets2::gedit("0.8", initial = "0.8", label = "NA.Filter", cont = dslyout2)
gWidgets2::tooltip(widgets$Frule1) <- "Removing missing values using 80 percent rule; valueRange,'0 ~ 1' "
widgets$imputeM1 <- gWidgets2::gcombobox(c("KNN", "min", "minHalf", "median"), label = "Imputation",
cont = dslyout2)
gWidgets2::tooltip(widgets$imputeM1) <- "Missing value or zero value imputation"
gWidgets2::visible(dslyout) <- TRUE
# Singal correction method
cslyout <- gexpandgroup("Singal correction method", cont = slyout)
cslyout2 <- gformlayout(cont = cslyout)
widgets$MLmethod <- gWidgets2::gradio(c("QCRFSC", "QCRLSC"), selected = 1, cont = cslyout2, horizontal = FALSE)
gWidgets2::visible(cslyout) <- TRUE
# Parameters for singal correction method
qfslyout <- gexpandgroup("Parameters", cont = slyout)
qfslyout2 <- glayout(cont = qfslyout, homogeneous = TRUE)
qfslyout2[1, 1, expand = TRUE, anchor = c(1, 0)] <- "Ntree (QCRFSC only)"
qfslyout2[1, 2] <- (widgets$ntree1 <- gWidgets2::gslider(from = 100, to = 1000, by = 10, value = 500,
cont = qfslyout2))
qfslyout2[2, 1, expand = TRUE, anchor = c(1, 0)] <- "      QCspan (QCRLSC only)"
qfslyout2[2, 2] <- (widgets$QCspan <- gWidgets2::gslider(from = 0, to = 0.75, by = 0.01, value = 0,
cont = qfslyout2))
gWidgets2::visible(qfslyout) <- TRUE
glabel("Click above to show", cont = slyout)
button.group <- gWidgets2::ggroup(container = shiftco_win)
## Push buttons to right
gWidgets2::addSpring(button.group)
gsc <- gWidgets2::gbutton("Run", handler = function(h, ...) {
# close.cur.dev()
samPeno = gWidgets2::svalue(widgets$pheno)
samFile = gWidgets2::svalue(widgets$profile)
Frule1 = gWidgets2::svalue(widgets$Frule1)
Frule1 = as.numeric(Frule1)
QCspan = gWidgets2::svalue(widgets$QCspan)
QCspan = as.numeric(QCspan)
ntree1 = gWidgets2::svalue(widgets$ntree1)
ntree1 = as.numeric(ntree1)
MLmethod = gWidgets2::svalue(widgets$MLmethod)
imputeM1 = gWidgets2::svalue(widgets$imputeM1)
# QC span check
if (MLmethod == "QCRLSC" & as.numeric(svalue(widgets$QCspan)) > 1e-04 & as.numeric(svalue(widgets$QCspan)) <
0.3499) {
QCok <- (gWidgets2::gconfirm("ERROR! For avoiding overfitting of the observed data, the default value of QCspan should be set as '0'.
STOP program now ?",
icon = c("error"), title = "QCspan Alert"))
if (QCok) {
stop("Reset your QCspan please! ")
} else {
NULL
}
} else {
NULL
}
logw1 <- gWidgets2::gwindow("Signal Correction Start...")
size(logw1) <- c(600, 500)
logg1 <- gWidgets2::gvbox(container = logw1)
logg1$set_borderwidth(5)
utils::capture.output(shiftCor(samPeno, samFile, Frule = Frule1, MLmethod = MLmethod, ntree = ntree1,
QCspan = QCspan, degree = 2, imputeM = imputeM1), file = "shiftCor.log", split = TRUE,
append = FALSE)
logtmp1 <- readLines(paste(getwd(), "shiftCor.log", sep = "/"))
ltxt1 <- gWidgets2::gtext(paste(logtmp1, collapse = "\n"), wrap = FALSE,
cont = logg1, expand = TRUE, fill = TRUE)
gWidgets2::gseparator(cont = logg1)
bglog1 <- gWidgets2::ggroup(cont = logg1)
gWidgets2::addSpring(bglog1)
gWidgets2::gbutton("All Done !", cont = bglog1, handler = function(h, ...) {
dispose(logw1)
})
#
about <- "The shifCor function provides the QC-based signal correction
for your omic data. The path of the shifCor output files
was showed in this log file.
See the manual, vignettes and references at
https: //stattarget.github.io"
gWidgets2::gbutton("about", cont = bglog1, handler = function(...) {
w1 <- gwindow("about", parent = logw1, expand = TRUE, fill = FALSE)
g <- gvbox(cont = w1, space = 10L)
g$set_borderwidth(5L)
glabel(about, cont = g, editable = FALSE)
gseparator(cont = g)
bg <- ggroup(cont = g)
addSpring(bg)
gbutton("dismiss", cont = bg, handler = function(...) dispose(w1))
})
}, container = button.group)
# Data preprocessing
gWidgets2::glayout(container = stat_win)
lyoutStat <- gWidgets2::ggroup(cont = stat_win, horizontal = FALSE, spacing = 15)
glyoutStat <- gWidgets2::gexpandgroup("Data preprocessing", cont = lyoutStat)
glyoutStat2 <- gWidgets2::gformlayout(cont = glyoutStat)
widgets$Frule2 <- gWidgets2::gedit("0.8", initial = "0.8", label = "   NA.Filter", cont = glyoutStat2)
gWidgets2::tooltip(widgets$Frule2) <- "Removing missing values using 80 percent rule; valueRange,'0 ~ 1' "
widgets$imputeM2 <- gWidgets2::gcombobox(c("KNN", "min", "minHalf", "median"), label = "   Imputation",
cont = glyoutStat2)
gWidgets2::tooltip(widgets$imputeM2) <- "Missing value imputation"
widgets$normM <- gWidgets2::gcombobox(c("NONE", "SUM", "PQN"), label = "   Normalization", cont = glyoutStat2)
gWidgets2::tooltip(widgets$normM) <- "median quotient normalization, 'PQN'; integral normalization , 'SUM', and 'NONE' "
widgets$Glog <- gWidgets2::gcombobox(c("TRUE", "FALSE"), label = "   Glog", cont = glyoutStat2)
gWidgets2::tooltip(widgets$Glog) <- "Data variance stabilising transformations"
gWidgets2::visible(glyoutStat) <- FALSE
# PCA and PLS analysis
plyoutStat <- gWidgets2::gexpandgroup("PCA and PLS analysis", cont = lyoutStat, , expand = TRUE)
plyoutStat2 <- gWidgets2::gformlayout(container = plyoutStat, expand = TRUE)
widgets$scalingMethod <- gWidgets2::gcombobox(c("Center", "Pareto", "Auto", "Vast", "Range", "None"),
label = "   Scaling", cont = plyoutStat2)
gWidgets2::tooltip(widgets$scalingMethod) <- "Data scaling for PCA or PLS(-DA) analysis"
widgets$pcaX <- gWidgets2::gedit("1", width = 8, label = "   PCs in Xaxis", cont = plyoutStat2)
gWidgets2::tooltip(widgets$pcaX) <- "   The X-axis (horizontal) component"
widgets$pcaY <- gWidgets2::gedit("2", width = 8, label = "   PCs in Xaxis", cont = plyoutStat2)
gWidgets2::tooltip(widgets$pcaY) <- "   The Y-axis (Vertical) component"
gWidgets2::visible(plyoutStat) <- FALSE
# random forest analysis
rlyoutStat <- gexpandgroup("Random forest analysis", cont = lyoutStat)
rlyoutStat2 <- gWidgets2::gformlayout(container = rlyoutStat)
widgets$nvarRF <- gWidgets2::gedit("5", width = 8, label = "   nvarRF", cont = rlyoutStat2)
gWidgets2::tooltip(widgets$nvarRF) <- "Visualizing variables importance in randomforest model"
widgets$ntree2 <- gWidgets2::gedit("500", width = 8, label = "   ntree", cont = rlyoutStat2)
gWidgets2::tooltip(widgets$ntree2) <- "The number of trees to grow in random forest model"
gWidgets2::visible(rlyoutStat) <- FALSE
# Permutation times
tlyoutStat <- gWidgets2::gexpandgroup("Permutation", cont = lyoutStat)
tlyoutStat2 <- gWidgets2::gformlayout(container = tlyoutStat)
widgets$Permutation <- gWidgets2::gedit("20", width = 8, label = "   Permutation times", cont = tlyoutStat2)
gWidgets2::tooltip(widgets$Permutation) <- "The number of permutation for binary PLS(-DA) and randomForest model"
gWidgets2::visible(tlyoutStat) <- FALSE
# Univariate analysis
ulyoutStat <- gWidgets2::gexpandgroup("Univariate analysis", cont = lyoutStat)
ulyoutStat2 <- gWidgets2::glayout(container = ulyoutStat, expand = TRUE, fill = TRUE)
ulyoutStat2[1, 1] <- "   Volcano FC >"
ulyoutStat2[1, 2] <- (widgets$mfc <- gWidgets2::gedit("2", width = 5, label = "Volcano FC >",
cont = ulyoutStat2))
gWidgets2::tooltip(widgets$mfc) <- "Fold changes threshold for Volcano plot"
ulyoutStat2[2, 1] <- "   Volcano FC <"
ulyoutStat2[2, 2] <- (widgets$lfc <- gWidgets2::gedit("0.5", width = 5, label = "Volcano FC <",
cont = ulyoutStat2))
gWidgets2::tooltip(widgets$lfc) <- "Fold changes threshold for Volcano plot"
ulyoutStat2[3, 1] <- "   Volcano Pvalue <"
ulyoutStat2[3, 2] <- (widgets$pvalue <- gWidgets2::gedit("0.05", width = 5, label = "Volcano Pvalue <",
cont = ulyoutStat2))
gWidgets2::tooltip(widgets$pvalue) <- "Significance level 'p-value' for Volcano plot"
ulyoutStat2[1, 3] <- "   Multiple Testing"
ulyoutStat2[1, 4, expand = TRUE] <- (widgets$FDR <- gWidgets2::gcombobox(c("TRUE", "FALSE"), cont = ulyoutStat2))
gWidgets2::tooltip(widgets$FDR) <- "Controlling the false discovery rate with Benjamini Hochberg method"
ulyoutStat2[2, 3] <- "   Labels"
ulyoutStat2[2, 4, expand = TRUE] <- (widgets$Labels <- gWidgets2::gcombobox(c("TRUE", "FALSE"),
cont = ulyoutStat2))
gWidgets2::tooltip(widgets$Labels) <- "Labelling sampleNames for scatterPlots of multiple statistical analysis"
gWidgets2::visible(ulyoutStat) <- FALSE
gWidgets2::glabel("Click above to show", cont = lyoutStat)
button.group <- gWidgets2::ggroup(container = stat_win)
## Push buttons to right
gWidgets2::addSpring(button.group)
gWidgets2::gbutton("Run", handler = function(h, ...) {
logw2 <- gWidgets2::gwindow("Statistical Analysis Start...")
size(logw2) <- c(600, 500)
logg2 <- gWidgets2::gvbox(container = logw2)
logg2$set_borderwidth(5)
# run the code
file = gWidgets2::svalue(widgets$stat)
Frule2 = gWidgets2::svalue(widgets$Frule2)
Frule2 = as.numeric(Frule2)
imputeM2 = gWidgets2::svalue(widgets$imputeM2)
glog = gWidgets2::svalue(widgets$Glog)
normM = gWidgets2::svalue(widgets$norm)
nvarRF = gWidgets2::svalue(widgets$nvarRF)
nvarRF = as.numeric(nvarRF)
ntree2 = gWidgets2::svalue(widgets$ntree2)
ntree2 = as.numeric(ntree2)
scaling = gWidgets2::svalue(widgets$scalingMethod)
silt = gWidgets2::svalue(widgets$Permutation)
silt = as.numeric(silt)
pcax = gWidgets2::svalue(widgets$pcaX)
pcax = as.numeric(pcax)
pcay = gWidgets2::svalue(widgets$pcaY)
pcay = as.numeric(pcay)
Labels = gWidgets2::svalue(widgets$Labels)
FDR = gWidgets2::svalue(widgets$FDR)
upper.lim = gWidgets2::svalue(widgets$mfc)
upper.lim = as.numeric(upper.lim)
lower.lim = gWidgets2::svalue(widgets$lfc)
lower.lim = as.numeric(lower.lim)
sig.lim = gWidgets2::svalue(widgets$pvalue)
sig.lim = as.numeric(sig.lim)
utils::capture.output(statAnalysis(file = file, Frule = Frule2, normM = normM, imputeM = imputeM2,
glog = glog, FDR = FDR, ntree = ntree2, nvarRF = nvarRF, scaling = scaling, silt = silt,
pcax = pcax, pcay = pcay, Labels = Labels, upper.lim = upper.lim, lower.lim = lower.lim,
sig.lim = sig.lim), file = "statAnalysis.log", split = TRUE, append = FALSE)
logtmp2 <- readLines(paste(getwd(), "statAnalysis.log", sep = "/"))
ltxt <- gtext(paste(logtmp2, collapse = "\n"), wrap = FALSE,
cont = logg2, expand = TRUE, fill = TRUE)
gseparator(cont = logg2)
bglog <- ggroup(cont = logg2)
addSpring(bglog)
gbutton("All Done !", cont = bglog, handler = function(h, ...) {
dispose(logw2)
})
#
about <- "The statAnalysis function provides the statistical analysis
for your omic data. The path of the statAnalsis output files
was showed in this log file.
See the manual, vignettes and references at
https: //stattarget.github.io"
gbutton("about", cont = bglog, handler = function(...) {
w1 <- gwindow("about", parent = logw2, expand = TRUE, fill = FALSE)
g <- gvbox(cont = w1, space = 10L)
g$set_borderwidth(5L)
glabel(about, cont = g, editable = FALSE)
gseparator(cont = g)
bg <- ggroup(cont = g)
addSpring(bg)
gbutton("dismiss", cont = bg, handler = function(...) dispose(w1))
})
}, container = button.group)
}
statTargetGUI()
install.packages('binneR')
librar(binneR)
library(binneR)
?binneR
??binneR
res <- readFiles(list.files(system.file('mzML',package = 'binneR'),
full.names=TRUE),dp = 2,scans = 6:17)
View(res)
res[["n"]]
View(res)
res
str(res)
x <- res$p
View(x)
y <- res$n
View(y)
res <- readFiles(list.files(system.file('mzML',package = 'binneR'),
full.names=TRUE),dp = 2,scans = 6)
View(res)
list.files(system.file('mzML',package = 'binneR')
)
system.file('mzML',package = 'binneR')
View(x)
library(statTarget)
statTargetGUI()
343000+27000+3000+212000
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
d
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity), mode = "markers", color = carat, size = carat)
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = d$carat, y = price, text = paste("Clarity: ", clarity), mode = "markers", color = carat, size = carat)
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = d$carat, y = d$price, text = paste("Clarity: ", clarity), mode = "markers", color = carat, size = carat)
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = d$carat, y = d$price, , mode = "markers", color = carat, size = carat)
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = d$carat, y = d$price, , mode = "markers", color = d$carat, size = d$carat)
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = d$carat, y = d$price, mode = "markers", color = d$carat, size = d$carat)
library(mzR)
?mzR
library("msdata")
f <- msdata::proteomics(full.names = TRUE, pattern = "TMT_")
f
rw <- openMSfile(f)
rw
rw@backend
rw@backend$get3DMap()
filepath <- system.file("microtofq", package = "msdata")
file <- list.files(filepath, pattern="MM14.mzML",
full.names=TRUE, recursive = TRUE)
file
mz <- openMSfile(file)
header(mz)
peaksCount(mz)
peaks(mz)
peak <- peaks(mz)
View(peak)
peak
peak[[1]]
peak[[1]][1]
length(peak)
length(peak[[1]])
peak[[1]]
peaksCount(mz,1)
peaksCount(mz,2)
peak[1]
peak[[1]]
da <- rbind(peak[[1]],peak[[2]])
View(da)
1378+1356
da <- as.list(peak[[1]],peak[[2]])
View(da)
first = list(a = 1, b = 2, c = 3)
second = list(a = 2, b = 3, c = 4)
first
l.1 <- list(list(c(10,20), NULL),list(c(10,20,30), NULL), list(c(9,12,13), NULL))
names(l.1) <- c("a","b","c")
l.1
names(peaks)
names(peak)
merge()
merge(peak[[1]],peak[[2]])
?merge
do.call(rbind,peak)
xx <- do.call(rbind,peak)
View(mz)
View(xx)
da <- as.list(peak[[1]],peak[[2]])
View(da)
da <- rbind(peak[[1]],peak[[2]])
View(first)
View(da)
da <- as.list(da)
View(da)
x <- peak[[1]]
View(peak)
View(x)
da <- as.list(x)
da <- rbind(peak[[1]],peak[[2]])
View(da)
da <- list(rbind(peak[[1]],peak[[2]]))
da
View(peak)
?cut
x <- cut(peak)
tx0 <- c(9, 4, 6, 5, 3, 10, 5, 3, 5)
x <- rep(0:8, tx0)
x
table( cut(x, b = 8))
?mzR
library(MSnbase)
?MSnbase
??xcms
?proFIA
??print.fileSnapshot
??proFIA
mz
mz@backend
mz@backend$getLastScan()
mz@backend$getInstrumentInfo()
mz@backend$getPeakList()
mz@backend$open()
mz@backend$getPeakList@.Data()
str(mz)
fileName(mz)
mz@.Data
mz@.__classVersion__$mzR
mz@backend@.xData
mz@backend$getPeakList
mz@backend$getScanHeaderInfo()
header(mz)
View(mz)
mz@backend[["getPeakList"]]@.Data
mz@.__classVersion__[["mzR"]]
head(mz)
header(mz)
library(msdata)
fl <- system.file("threonine", "threonine_i2_e35_pH_tree.mzXML",
package = "msdata")
fl
ms_fl <- openMSfile(fl, backend = "pwiz")
View(ms_fl)
pks <- spectra(ms_fl)
library(msdata)
library(mzR)
ms_fl <- openMSfile(fl, backend = "pwiz")
pks <- spectra(ms_fl)
?spectra
library(MSnbase)
pks <- spectra(ms_fl)
hdr <- header(ms_fl)
hdr
?spectra
rtime(mz)
rtime(ms_fl)
pks <- peaks(ms_fl)
pks <- lapply(pks, function(z) {
z[, 2] <- z[, 2] + 100
z })
View(pks)
out_file <- tempfile()
writeMSData(object = pks, file = out_file, header = hdr)
copyWriteMSData(pks, file = out_file, original_file = fl,
header = hdr)
?writeMSData
??writeMSData
chromatogramsInfo(ms_fl)
peaks(ms_fl)
xx <- peaks(ms_fl)
mz
dat <- peaks(mz)
data <- dat*100
View(dat)
data <- lapply(dat, function(z) {
z[, 2] <- z[, 2] + 100
z })
View(dat)
dat[[1]]
dat[[1]][,1]
View(dat)
header(dat[[1]])
header(dat)
dat[[1]][1,2]
dat[[1]][1,]
data <- lapply(dat, function(z) {
z[, 2] <- z[, 2] + 100
z })
dat[[1]][1,]
data[[1]][1,]
out_file <- tempfile()
writeMSData(object = data, file = out_file, header = hdr)
?writeMSData
??writeMSData
library(mzR)
writeMSData(object = data, file = out_file, header = hdr)
?proFIA
??proFIA
x <- xcmsRaw("mzxml")
mzxml <- system.file("threonine/threonine_i2_e35_pH_tree.mzXML",
package = "msdata")
x <- xcmsRaw(mzxml)
library(xcms)
x <- xcmsRaw(mzxml)
View(x)
x
x@scanindex
?MSnbase
s <- new("Spectrum2", mz=1:10, intensity=1:10)
s
View(s)
intensity(s)
intensity(bin(s, binSize=2))
data(itraqdata)
sum(peaksCount(itraqdata))
itraqdata2 <- bin(itraqdata, binSize=2)
sum(peaksCount(itraqdata2))
processingData(itraqdata2)
??xcms
?xcmsRaw
library(binneR)
res <- readFiles(list.files(system.file('mzML',package = 'binneR'),
full.names=TRUE),dp = 2,scans = 6:17)
res <- readFiles(list.files(system.file('mzML',package = 'binneR'),
full.names=TRUE),dp = 2,scans = 6)
res <- readFiles(list.files(system.file('mzML',package = 'binneR'),
full.names=TRUE),dp = 2,scans = 0)
res <- readFiles(list.files(system.file('mzML',package = 'binneR'),
full.names=TRUE),dp = 2,scans = 1)
res <- readFiles(list.files(system.file('mzML',package = 'binneR'),
full.names=TRUE),dp = 2,scans = 1:6)
setwd("~/Documents/software/Package/statTarget_18-410/R")
library(devtools)
load_all()
statTargetGUI()
statTargetGUI()
load_all()
statTargetGUI()
load_all()
setwd("~/Documents/software/Package/statTarget_18-410/R")
load_all()
load_all()
statTargetGUI()
